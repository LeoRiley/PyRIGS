# Generated by Django 3.1 on 2020-09-15 08:37

import RIGS.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('RIGS', '0038_auto_20200306_2000'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventChecklist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('safe_parking', models.BooleanField(help_text='Vehicles parked safely?<br><small>(does not obstruct venue access)</small>')),
                ('safe_packing', models.BooleanField(help_text='Equipment packed away safely?<br><small>(including flightcases)</small>')),
                ('exits', models.BooleanField(help_text='Emergency exits clear?')),
                ('trip_hazard', models.BooleanField(help_text='Appropriate barriers around kit and cabling secured?')),
                ('warning_signs', models.BooleanField(help_text='Warning signs in place?<br><small>(strobe, smoke, power etc.)</small>')),
                ('ear_plugs', models.BooleanField(help_text='Ear plugs issued to crew where needed?')),
                ('hs_location', models.CharField(help_text='Location of Safety Bag/Box', max_length=255)),
                ('extinguishers_location', models.CharField(help_text='Location of fire extinguishers', max_length=255)),
                ('rcds', models.BooleanField(blank=True, help_text='RCDs installed where needed and tested?', null=True)),
                ('supply_test', models.BooleanField(blank=True, help_text='Electrical supplies tested?<br><small>(using socket tester)</small>', null=True)),
                ('earthing', models.BooleanField(help_text='Equipment appropriately earthed?<br><small>(truss, stage, generators etc)</small>')),
                ('pat', models.BooleanField(help_text='All equipment in PAT period?')),
                ('medium_event', models.BooleanField()),
                ('source_rcd', models.BooleanField(blank=True, help_text='Source RCD protected?<br><small>(if cable is more than 3m long) </small>', null=True)),
                ('labelling', models.BooleanField(blank=True, help_text='Appropriate and clear labelling on distribution and cabling?', null=True)),
                ('fd_voltage_l1', models.IntegerField(blank=True, help_text='L1 - N', null=True, verbose_name='First Distro Voltage L1-N')),
                ('fd_voltage_l2', models.IntegerField(blank=True, help_text='L2 - N', null=True, verbose_name='First Distro Voltage L2-N')),
                ('fd_voltage_l3', models.IntegerField(blank=True, help_text='L3 - N', null=True, verbose_name='First Distro Voltage L3-N')),
                ('fd_phase_rotation', models.BooleanField(blank=True, help_text='Phase Rotation<br><small>(if required)</small>', null=True, verbose_name='Phase Rotation')),
                ('fd_earth_fault', models.IntegerField(blank=True, help_text='Earth Fault Loop Impedance (Z<small>S</small>)', null=True, verbose_name='Earth Fault Loop Impedance')),
                ('fd_pssc', models.IntegerField(blank=True, help_text='Prospective Short Circuit Current', null=True, verbose_name='PSCC')),
                ('w1_description', models.CharField(blank=True, help_text='Description', max_length=255, null=True)),
                ('w1_polarity', models.BooleanField(blank=True, help_text='Polarity Checked?', null=True)),
                ('w1_voltage', models.IntegerField(blank=True, help_text='Voltage', null=True)),
                ('w1_earth_fault', models.IntegerField(blank=True, help_text='Earth Fault Loop Impedance (Z<small>S</small>)', null=True)),
                ('w2_description', models.CharField(blank=True, help_text='Description', max_length=255, null=True)),
                ('w2_polarity', models.BooleanField(blank=True, help_text='Polarity Checked?', null=True)),
                ('w2_voltage', models.IntegerField(blank=True, help_text='Voltage', null=True)),
                ('w2_earth_fault', models.IntegerField(blank=True, help_text='Earth Fault Loop Impedance (Z<small>S</small>)', null=True)),
                ('w3_description', models.CharField(blank=True, help_text='Description', max_length=255, null=True)),
                ('w3_polarity', models.BooleanField(blank=True, help_text='Polarity Checked?', null=True)),
                ('w3_voltage', models.IntegerField(blank=True, help_text='Voltage', null=True)),
                ('w3_earth_fault', models.IntegerField(blank=True, help_text='Earth Fault Loop Impedance (Z<small>S</small>)', null=True)),
                ('all_rcds_tested', models.BooleanField(blank=True, help_text='All circuit RCDs tested?<br><small>(using test button)</small>', null=True)),
                ('public_sockets_tested', models.BooleanField(blank=True, help_text='Public/Performer accessible circuits tested?<br><small>(using socket tester)</small>', null=True)),
                ('reviewed_at', models.DateTimeField(null=True)),
            ],
            options={
                'ordering': ['event'],
                'permissions': [('review_eventchecklist', 'Can review Event Checklists')],
            },
            bases=(models.Model, RIGS.models.RevisionMixin),
        ),
        migrations.CreateModel(
            name='EventChecklistCrew',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=255)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('checklist', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='crew', to='RIGS.eventchecklist')),
            ],
            bases=(models.Model, RIGS.models.RevisionMixin),
        ),
        migrations.CreateModel(
            name='EventChecklistVehicle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle', models.CharField(max_length=255)),
                ('checklist', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='RIGS.eventchecklist')),
            ],
            bases=(models.Model, RIGS.models.RevisionMixin),
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nonstandard_equipment', models.BooleanField(help_text="Does the event require any hired in equipment or use of equipment that is not covered by TEC's standard risk assessments and method statements?")),
                ('nonstandard_use', models.BooleanField(help_text='Are TEC using their equipment in a way that is abnormal?<br><small>i.e. Not covered by TECs standard health and safety documentation</small>')),
                ('contractors', models.BooleanField(help_text='Are you using any external contractors?')),
                ('other_companies', models.BooleanField(help_text='Are TEC working with any other companies on site?')),
                ('crew_fatigue', models.BooleanField(help_text='Is crew fatigue likely to be a risk at any point during this event?')),
                ('general_notes', models.TextField(blank=True, help_text='Did you have to consult a supervisor about any of the above? If so who did you consult and what was the outcome?', null=True)),
                ('big_power', models.BooleanField(help_text='Does the event require larger power supplies than 13A or 16A single phase wall sockets, or draw more than 20A total current?')),
                ('generators', models.BooleanField(help_text='Will generators be used?')),
                ('other_companies_power', models.BooleanField(help_text='Will TEC be supplying power to any other companies?')),
                ('nonstandard_equipment_power', models.BooleanField(help_text='Does the power plan require the use of any power equipment (distros, dimmers, motor controllers, etc.) that does not belong to TEC?')),
                ('multiple_electrical_environments', models.BooleanField(help_text='Will the electrical installation occupy more than one electrical environment?')),
                ('power_notes', models.TextField(blank=True, help_text='Did you have to consult a supervisor about any of the above? If so who did you consult and what was the outcome?', null=True)),
                ('noise_monitoring', models.BooleanField(help_text='Does the event require noise monitoring or any non-standard procedures in order to comply with health and safety legislation or site rules?')),
                ('sound_notes', models.TextField(blank=True, help_text='Did you have to consult a supervisor about any of the above? If so who did you consult and what was the outcome?', null=True)),
                ('known_venue', models.BooleanField(help_text='Is the event in a venue that you and/or TEC have experience working in?')),
                ('safe_loading', models.BooleanField(help_text='Is there a safe load in/out?<br><small>e.g. sufficient lighting, flat, not in a crowded area etc.</small>')),
                ('safe_storage', models.BooleanField(help_text='Are there areas to safely store equipment?')),
                ('area_outside_of_control', models.BooleanField(help_text="Is any part of the work area out of TEC's direct control or openly accessible during the build or breakdown period?")),
                ('barrier_required', models.BooleanField(help_text='Is there a requirement for TEC to provide any barrier for security or protection of persons/equipment?')),
                ('nonstandard_emergency_procedure', models.BooleanField(help_text="Does the emergency procedure for the event differ from TEC's standard procedures?")),
                ('special_structures', models.BooleanField(help_text='Does the event require use of winch stands, motors, MPT Towers, or staging?')),
                ('persons_responsible_structures', models.TextField(blank=True, help_text='Who are the persons on site responsible for their use?', null=True)),
                ('suspended_structures', models.BooleanField(help_text="Are any structures (excluding projector screens and IWBs) being suspended from TEC's structures?")),
                ('reviewed_at', models.DateTimeField(null=True)),
            ],
            options={
                'ordering': ['event'],
                'permissions': [('review_riskassessment', 'Can review Risk Assessments')],
            },
            bases=(models.Model, RIGS.models.RevisionMixin),
        ),
        migrations.RemoveField(
            model_name='eventcrew',
            name='event',
        ),
        migrations.RemoveField(
            model_name='eventcrew',
            name='user',
        ),
        migrations.DeleteModel(
            name='RIGSVersion',
        ),
        migrations.RemoveField(
            model_name='event',
            name='risk_assessment_edit_url',
        ),
        migrations.AlterField(
            model_name='profile',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.DeleteModel(
            name='EventCrew',
        ),
        migrations.AddField(
            model_name='riskassessment',
            name='event',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='RIGS.event'),
        ),
        migrations.AddField(
            model_name='riskassessment',
            name='power_mic',
            field=models.ForeignKey(blank=True, help_text='Who is the Power MIC?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='power_mic', to=settings.AUTH_USER_MODEL, verbose_name='Power MIC'),
        ),
        migrations.AddField(
            model_name='riskassessment',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Reviewer'),
        ),
        migrations.AddField(
            model_name='eventchecklistvehicle',
            name='driver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventchecklistcrew',
            name='crewmember',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crewed', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventchecklist',
            name='event',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='RIGS.event'),
        ),
        migrations.AddField(
            model_name='eventchecklist',
            name='power_mic',
            field=models.ForeignKey(help_text='Who is the Power MIC?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='checklists', to=settings.AUTH_USER_MODEL, verbose_name='Power MIC'),
        ),
        migrations.AddField(
            model_name='eventchecklist',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Reviewer'),
        ),
    ]
